from .utils import (
    est_chiffre_arabe, est_nombre_arabe, est_entier_naturel, est_entier_naturel_negatif,
    est_decimal_fini, est_fraction_rationnelle, est_nombre_rationnel, est_irrationnel_connu,
    est_reel, est_imaginaire_pur, est_complexe, get_ensemble_definitions
)
from django.utils.translation import gettext_lazy as _

def analyser_nombre(nombre):
    """Analyse compl√®te d'un nombre avec r√©sultats d√©taill√©s"""
    # Convertir en string si c'est un float
    if isinstance(nombre, float):
        nombre = str(nombre)

    definitions = get_ensemble_definitions()
    
    # Mapping des noms d'ensembles
    noms_ensembles = {
        'chiffre_arabe': 'Ensemble des chiffres arabes',
        'nombre_arabe': 'Ensemble des nombres arabes',
        'entier_naturel': 'Ensemble des entiers naturels',
        'entier_naturel_negatif': 'Ensemble des entiers naturels n√©gatifs',
        'entier_relatif': 'Ensemble des entiers relatifs',
        'decimal_fini': 'Ensemble des d√©cimaux finis',
        'fraction_rationnelle': 'Ensemble des fractions rationnelles',
        'nombre_rationnel': 'Ensemble des nombres rationnels',
        'irrationnel_connu': 'Ensemble des irrationnels connus',
        'reel': 'Ensemble des nombres r√©els',
        'imaginaire_pur': 'Ensemble des imaginaires purs',
        'complexe': 'Ensemble des nombres complexes'
    }
    
    result = {key: {
        'nom': noms_ensembles[key],
        'appartient': False,
        'definition': definitions[key]['definition'],
        'description': definitions[key]['description'],
        'explication': ""
    } for key in definitions}
    
    # 1. Chiffre arabe
    result['chiffre_arabe']['appartient'] = est_chiffre_arabe(nombre)
    if result['chiffre_arabe']['appartient']:
        result['chiffre_arabe']['explication'] = f"{nombre} ‚àà A : C'est bien un chiffre entre 0 et 9."
    else:
        explication = f"{nombre} ‚àâ A"
        if len(nombre) != 1:
            explication += f"\n‚Ü™ Contient {len(nombre)} caract√®res (doit √™tre un seul chiffre)"
        if not nombre.isdigit():
            explication += "\n‚Ü™ Contient des caract√®res non num√©riques"
        result['chiffre_arabe']['explication'] = explication
    
    # 2. Nombre arabe
    result['nombre_arabe']['appartient'] = est_nombre_arabe(nombre)
    if result['nombre_arabe']['appartient']:
        result['nombre_arabe']['explication'] = f"{nombre} ‚àà B : Nombre compos√© de chiffres sans z√©ro initial."
    else:
        explication = f"{nombre} ‚àâ B"
        if len(nombre) < 2:
            explication += "\n‚Ü™ Moins de 2 chiffres"
        elif nombre[0] == '0':
            explication += "\n‚Ü™ Commence par z√©ro"
        elif not nombre.isdigit():
            explication += "\n‚Ü™ Contient des caract√®res non num√©riques"
        result['nombre_arabe']['explication'] = explication
    
    # 3. Entier naturel
    result['entier_naturel']['appartient'] = est_entier_naturel(nombre)
    if result['entier_naturel']['appartient']:
        result['entier_naturel']['explication'] = f"{nombre} ‚àà ‚Ñï : C'est 0 ou un nombre arabe valide."
    else:
        explication = f"{nombre} ‚àâ ‚Ñï"
        if nombre != '0':
            explication += "\n‚Ü™ Ce n'est ni '0' ni un nombre arabe conforme"
        result['entier_naturel']['explication'] = explication
    
    # 4. Entier naturel n√©gatif
    result['entier_naturel_negatif']['appartient'] = est_entier_naturel_negatif(nombre)
    if result['entier_naturel_negatif']['appartient']:
        result['entier_naturel_negatif']['explication'] = f"{nombre} ‚àà ‚Ñï‚Åª : C'est un entier n√©gatif avec une partie positive conforme √† B."
    else:
        explication = f"{nombre} ‚àâ ‚Ñï‚Åª"
        if not nombre.startswith('-'):
            explication += "\n‚Ü™ Ne commence pas par '-'"
        else:
            explication += "\n‚Ü™ La partie apr√®s '-' n'est pas un nombre arabe valide"
        result['entier_naturel_negatif']['explication'] = explication
    
    # 5. Entier relatif
    result['entier_relatif']['appartient'] = (result['entier_naturel']['appartient'] or 
                                              result['entier_naturel_negatif']['appartient'])
    if result['entier_relatif']['appartient']:
        result['entier_relatif']['explication'] = f"{nombre} ‚àà ‚Ñ§ : C'est un entier positif, nul ou n√©gatif."
    else:
        result['entier_relatif']['explication'] = f"{nombre} ‚àâ ‚Ñ§\n‚Ü™ Ce n'est ni un entier naturel ni un entier n√©gatif connu"
    
    # 6. D√©cimal fini
    result['decimal_fini']['appartient'] = est_decimal_fini(nombre)
    if result['decimal_fini']['appartient']:
        result['decimal_fini']['explication'] = f"{nombre} ‚àà ùîª : Il s'agit d'un nombre avec une partie d√©cimale finie."
    else:
        explication = f"{nombre} ‚àâ ùîª"
        if '.' not in nombre:
            explication += "\n‚Ü™ Ne contient pas de point d√©cimal"
        else:
            explication += "\n‚Ü™ Le format n'est pas celui d'un d√©cimal fini ou tous les chiffres apr√®s la virgule sont nuls"
        result['decimal_fini']['explication'] = explication
    
    # 7. Fraction rationnelle
    result['fraction_rationnelle']['appartient'] = est_fraction_rationnelle(nombre)
    if result['fraction_rationnelle']['appartient']:
        result['fraction_rationnelle']['explication'] = f"{nombre} ‚àà F : C'est une fraction non d√©cimale avec d√©nominateur ‚â† 10‚Åø."
    else:
        explication = f"{nombre} ‚àâ F"
        if '/' not in nombre:
            explication += "\n‚Ü™ N'est pas une fraction"
        else:
            explication += "\n‚Ü™ Le d√©nominateur est une puissance de 10 (forme d√©cimale d√©guis√©e)"
        result['fraction_rationnelle']['explication'] = explication
    
    # 8. Nombre rationnel
    result['nombre_rationnel']['appartient'] = est_nombre_rationnel(nombre)
    if result['nombre_rationnel']['appartient']:
        result['nombre_rationnel']['explication'] = f"{nombre} ‚àà ‚Ñö : Il peut s'√©crire comme un rapport de deux entiers."
    else:
        result['nombre_rationnel']['explication'] = f"{nombre} ‚àâ ‚Ñö\n‚Ü™ Ce nombre ne peut pas √™tre exprim√© comme une fraction exacte de deux entiers"
    
    # 9. Irrationnel connu
    result['irrationnel_connu']['appartient'] = est_irrationnel_connu(nombre)
    if result['irrationnel_connu']['appartient']:
        result['irrationnel_connu']['explication'] = f"{nombre} est un irrationnel c√©l√®bre."
    else:
        result['irrationnel_connu']['explication'] = f"{nombre} n'est pas un irrationnel c√©l√®bre connu\n‚Ü™ Vous pouvez essayer 'pi', 'e', 'sqrt(2)'..."
    
    # 10. R√©el
    result['reel']['appartient'] = est_reel(nombre)
    if result['reel']['appartient']:
        result['reel']['explication'] = f"{nombre} ‚àà ‚Ñù\n‚Ü™ Le nombre est un entier ou un d√©cimal valide."
    else:
        result['reel']['explication'] = f"{nombre} ‚àâ ‚Ñù\n‚Ü™ Le nombre ne correspond pas √† une repr√©sentation r√©elle standard"
    
    # 11. Imaginaire pur
    result['imaginaire_pur']['appartient'] = est_imaginaire_pur(nombre)
    if result['imaginaire_pur']['appartient']:
        result['imaginaire_pur']['explication'] = f"{nombre} ‚àà i‚Ñù\n‚Ü™ Le nombre est bien de la forme 'bi' avec b r√©el."
    else:
        result['imaginaire_pur']['explication'] = f"{nombre} ‚àâ i‚Ñù\n‚Ü™ Le nombre n'est pas un imaginaire pur (ex: '3i', '-1.5i')"
    
    # 12. Complexe
    result['complexe']['appartient'] = est_complexe(nombre)
    if result['complexe']['appartient']:
        result['complexe']['explication'] = f"{nombre} ‚àà ‚ÑÇ\n‚Ü™ Le nombre est bien un complexe (a + bi, ou ‚Ñù ou i‚Ñù)."
    else:
        result['complexe']['explication'] = f"{nombre} ‚àâ ‚ÑÇ\n‚Ü™ Le nombre n'est pas un complexe valide"
    
    return result

